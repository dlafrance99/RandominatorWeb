{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["HomeStyle","styled","div","App","className","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qrDAIA,IAAMA,E,KAAYC,EAAOC,IAAV,KAsOAC,MA/If,WACE,OACE,oCACE,kBAACH,EAAD,KACE,yBAAKI,UAAU,UAEb,4CAIA,6BACE,uBAAGC,KAAK,GAAGC,OAAO,SAASC,IAAI,uBAA/B,gCAOJ,yBAAKH,UAAU,kBACb,oDAIA,yBAAKA,UAAU,QAOb,4MASJ,yBAAKA,UAAU,mBACb,uDAIA,yBAAKA,UAAU,SAOb,yaAYJ,yBAAKA,UAAU,mBACb,2CAIA,yBAAKA,UAAU,SAOb,0TAaJ,yBAAKA,UAAU,mBACb,uDAIA,yBAAKA,UAAU,SAEb,kWAYJ,yBAAKA,UAAU,UAEb,yBAAKA,UAAU,OAEb,0CAIA,6BACE,uBAAGC,KAAK,GAAGC,OAAO,SAASC,IAAI,uBAA/B,gCAOJ,6BAEA,yBAAKH,UAAU,OAEb,uDAIA,gGClNQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.26da7e11.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport styled from \"styled-components\"\n\nconst HomeStyle = styled.div`\nfont-family: 'Kailasa-Bold';\ncolor: white;\ntext-shadow: 2px 2px 4px white;\nbackground-color: #09090a;\na{\n  background-color: #09090a;\n  padding: 15px;\n  color: white;\n  border-radius: 25px;\n}\np{\n  width: 60%;\n  margin: auto\n}\nh1{\n  text-align: center;\n}\nimg{\n  height: 350px;\n  margin-bottom: 10px;\n}\n.header{\n  text-align: center;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  background-color: #04005e;\n}\n.footer{\n  text-align: center;\n  background-color: #04005e;\n  padding-bottom: 10px;\n}\n.row{\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\nhr{\n  width: 81%\n}\n.container-main{\n  background-color: #0e111b;\n  padding-top: 10px;\n  color: #08f7fe;\n  text-shadow: 2px 2px 4px #08f7fe;\n}\n.main{\n  display: flex;\n  width: 80%;\n  margin: auto\n}\n.container-body1{\n  background-color: #09090a;\n  color: #fe53bb;\n  text-shadow: 2px 2px 4px #fe53bb;\n}\n.body1{\n  display: flex;\n  width: 80%;\n  margin: auto\n}\n.container-body2{\n  background-color: #0e111b;\n  padding-top: 10px;\n  color: #09fbd3;\n  text-shadow: 2px 2px 4px #09fbd3;\n}\n.body2{\n  display: flex;\n  width: 80%;\n  margin: auto\n}\n.container-body3{\n  background-color: #09090a;\n  color: #7122fa;\n  text-shadow: 2px 2px 4px #7122fa;\n}\n.body3{\n  display: flex;\n  width: 80%;\n  margin: auto\n}\n`\n\n\nfunction App() {\n  return (\n    <>\n      <HomeStyle>\n        <div className='header'>\n\n          <h1>\n            Randominator\n          </h1>\n\n          <div>\n            <a href='' target='_blank' rel=\"noopener noreferrer\">\n              DOWNLOAD ON THE APP STORE!\n            </a>\n          </div>\n\n        </div>\n\n        <div className='container-main'>\n          <h1>\n            Randomize Your Life!\n          </h1>\n\n          <div className='main'>\n\n            {/* <img\n              src={require('./ScreenShots/Iphone/01_login.png')}\n              alt='Home Page'\n            /> */}\n\n            <p>\n              Do you have problems making decisions? Would you prefer your life to be a little more random? Well look no further, Randominator is here to make all your decisons for you!\n            </p>\n\n\n          </div>\n        </div>\n\n\n        <div className='container-body1'>\n          <h1>\n            Create Re-Usable Lists!\n          </h1>\n\n          <div className='body1'>\n\n            {/* <img\n              src={require('./ScreenShots/Iphone/06_PracticeScreen.png')}\n              alt='Blackjack Screen'\n            /> */}\n\n            <p>\n              Do you constantly find yourself wanting to randomize the same set of items? Randominator makes that easy by allowing you to save your lists and revisit them as often as you want! What if you want to randomize it again? Easy after you Randominate through your items and get your random item, if you don't like it, simply hit the 'try again' button and it will cycle through your options again!\n            </p>\n\n            {/* <img\n              src={require('./ScreenShots/Iphone/07_PracticeScreenResults.png')}\n              alt='Blackjack Screen'\n            /> */}\n\n          </div>\n        </div>\n\n        <div className='container-body2'>\n          <h1>\n            Edit Lists!\n          </h1>\n\n          <div className='body2'>\n\n            {/* <img\n              src={require('./ScreenShots/Iphone/11_GameSelection.png')}\n              alt='Blackjack Screen'\n            /> */}\n\n            <p>\n              Forget to add something to your list? Or would you rather remove something from your list? Or are you kind of a wild child? Maybe considering deleting a whole list? No problem! Simply head to our 'Edit Lists' section and add/remove items from lists or simply delete the whole list!\n            </p>\n\n            {/* <img\n              src={require('./ScreenShots/Iphone/02_GameDescription.png')}\n              alt='Blackjack Screen'\n            /> */}\n\n          </div>\n        </div>\n\n\n        <div className='container-body3'>\n          <h1>\n            Rando Number Generator!\n          </h1>\n\n          <div className='body3'>\n\n            <p>\n              We get it, sometimes you just need a random number. Obviously you don't want to write in ALL the possible number options, so we'll take care of that for you! Simply head to our Rando Number section and enter the minimum number and maximum number and we'll give you your random number! It also works with negative numbers!\n            </p>\n\n            {/* <img\n              src={require('./ScreenShots/Iphone/08_Records.png')}\n              alt='Blackjack Screen'\n            /> */}\n\n          </div>\n        </div>\n\n        <div className='footer'>\n\n          <div className='row'>\n\n            <h1>\n              NAW Putter\n            </h1>\n\n            <div>\n              <a href='' target='_blank' rel=\"noopener noreferrer\">\n                DOWNLOAD ON THE APP STORE!\n              </a>\n            </div>\n\n          </div>\n\n          <hr />\n\n          <div className='row'>\n\n            <p>\n              nawdevelopment@gmail.com\n            </p>\n\n            <p>\n              Built in Colorado | Copyright Â© 2020 NAW Development LLC.\n            </p>\n\n          </div>\n\n        </div>\n      </HomeStyle>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}